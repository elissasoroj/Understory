{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"is an educational framework for providing access to meaningful education & research opportunities for post-secondary students and undergraduates; developed in conjunction with shadie . .md-typeset h1, .md-content__button { display: none; }","title":"Home"},{"location":"about/","text":"Before You Start Bushwhacking! This site is currently under construction, but you are welcome to poke around! The wheel barrow icon indicates features that may not be released yet. If you have time to provide some feedback, please use this Google Form ...or direct comments and suggestions to Elissa Access to meaningful research opportunities at the post-secondary and undergraduate level for many students is challenging, and represents a significant barrier that prevents students from entering scientific fields. Leveraging the accessibility of simulation- and coding- based projects can help alleviate this gap in equity, allowing students to develop impactful research projects in a self-directed manner, even if they are resource-limited. Understory provides: Background Information: in the form of a text that covers topics relevant to the project Outside Resources: for learning more about the topics covered (open-access where possible) Research Guide: a tutorial-style guide for students to help them develop a research project utilizing shadie . Appropriate for advanced high school and undergraduate students Research Hub: an online home where outcomes of research projects utilizing shadie can be accessed. This hub is maintained on the shadie documentation site, but Understory provides specific instructions encouraging students to contribute to this resource. This allows them to engage with the community, publish their work informally, and for scientists in the field to benefit from what they find.","title":"About"},{"location":"drafts/about-with-framework/","text":"Access to meaningful research opportunities at the post-secondary and undergraduate level for many students is challenging, and represents a significant __ that prevents students from entering scientific fields. Leveraging the accessibility of simulation- and coding- based projects can help alleviate this gap in equity, allowing students to develop impactful research projects in a self-directed manner, even if they are resource-limited. Understory is a case-study in this framework for creating accessible, open-source resources in conjunction with regular research activities conducted by all members of a lab. The availability of free and sophisticated tools for developing online resources leaves little excuse for scientists to avoid utilizing them. Developing such a resource, in addition to __ and creating opportunities for lab members, also increases transparency and serves as a access-point for a public audience. Understory is a based on shadie , a python wrapper developed for SLiM. Using as a guide, Understory provides: Background Information: in the form of a text that covers topics relevant to the project Resources: for learning more about the topic (open-access where possible) Research Guide: a tutorial-style guide for students to help them develop a research project utilizing shadie . Appropriate for advanced high school and undergraduate students Research Hub: an online home where outcomes of research projects utilizing shadie can be accessed. This hub is maintained on the shadie documentation site, but Understory provides specific instructions encouraging students to contribute to this resource. This allows them to engage with the community, publish their work informally, and for scientists in the field to benefit from what they find.","title":"About with framework"},{"location":"drafts/evolution-index/","text":"Under Construction","title":"Evolution index"},{"location":"drafts/good-icons/","text":"Good Icons","title":"Good Icons"},{"location":"drafts/good-icons/#good-icons","text":"","title":"Good Icons"},{"location":"drafts/text-index/","text":"Under Construction","title":"Introduction"},{"location":"text/lifecycle_evo/evolution_landplants/","text":"Introduction to the Plant Life Cycle All sexually reproducing organisms have a life cycle that alternates between a haploid and diploid life stage. In many animals, especially vertebrates, the haploid life stage (sperm and egg) is so short-lived that we hardly consider it, as the dominant part of the life cycle is clearly the diploid. In plants, things are very different. The diploid life stage is called the sporophyte, and in some lineages of plants this is the dominant life stage. However, in some plants, such as mosses, the dominant life stage is actually the haploid life stage, which is called the gametophyte. Only the gametophyte life stage in plants make gametangia - the sexual organs where egg and sperm are produced. Many plant researchers like to joke that sporophytes are asexual - they are not capable of having sex and cannot be male or female. Only the gametophytes can be male or female, and only the gametophytes have sex! Land plants also have a special step in their life cycle that vertebrates do not: the spore. Spores are produced by the sporophyte and give rise the gametophyte, in much the same way that the zygote (i.e. the seed, in seed plants) gives rise to the sporophyte. There is a nice symmetry to the terms here: During the haploid life stage: the gam etophyte makes gam etangia, where gam etes are produced. During the diploid life stage: the spor ophyte makes spor angia, where the spor es are produced Evolution of the Land Plant Lifecycle Land plants, or Embryophytes, are a monophyletic clade that includes flowering plants, conifers, ferns, lycophytes, mosses, hornworts, and liverworts. Fittingly, most of these plants live out of water, although some have returned to a completely aquatic lifestyle. It is hypothesized ( de Vries & Archibald, 2018 ) that all land plants evolved from a shared charophyte-like algal ancestor. Charophyte algae is photosynthetic and has a multiceulluar, haploid adult life stage that forms two sex organs: the male antheridium and female oogonium. When sperm from the antheridium and an egg from the oogonium fuse, they create a single-celled diploid zygote which immediately undergoes meiosis to create more haploid adults. [ancestral life cycle diagram] The name for land plants, Embryophytes, comes from a key change that occurred in the ancestor of all land plants. The diploid zygote began to delay meiosis and became multicellular - in other words, there is now a resting embryo stage in the diploid life phase. Other characteristics that distinguish Embryophytes include multicellular reproductive structures, a cuticle, and thick-walled trilete spores (Judd et al. 2016). These characteristics may have assisted the ancetral Embryophyte to transition to land. All lands plant life cycles follow this general sequence of steps: the haploid gametophyte life stage undergoes mitosis to form archegonia and antheridia, where eggs and sperm are produced an egg is fertilized by a single sperm to form a diploid zygote sporophyte once mature, the sporophyte creates specialized diploid structures called sporangia, which may be housed within further specialized structures diploid sporocytes, or spore \u2018mother cells\u2019, are created by mitosis within the sporangia each sporocyte performs two meiotic divisions to create four haploid spores spores develop into new haploid gametophytes by mitosis. The meiotic divisions in step 5 are the only opportunity for recombination to occur throughout the life cycle. All subsequent haploid structures that arise from a spore (i.e., gametophyte, archegonia, antheridia, gametes) are genetically identical to the original spore. Bryophytes Bryophytes refer to a group that includes mosses, hornworts, and liverworts. The monophyly of this group has been contentious for a long time, but recently Bryophytes have been reported to be monophyletic, with hornworts sister to liverworts and mosses ( Su et al. 2021 ). Each group has a unique life history and evolutionary ancestry that distinguishes them. However, they are united by a similar life cycle, with a dominant, long-lived haploid life stage and a shorter, ephemeral diploid life stage. Some Bryophytes are monoicous, which means their gametophyte life stage is capable of producing both female and male gametangia, and therefore both egg and sperm. Others are dioicous: their gametophyte are either male or female, and each individual can only make sperm or eggs, but not both. The sperm from one gametophyte will fertilize the egg of another and produce a zygote sporophyte, which develops as a superficial structure growing from the gametophyte (in dioicous species, this only occurs on the female gametophytes). Sporangia develop within the sporophyte and release spores when mature. The spores are dispersed into the surrounding environment and develop into new gametophytes. The sporophyte then dies, but the gametophyte parent continues living, and may reproduce again Pteridophytes Pteridophytes are a paraphyletic clade that includes lycophytes and ferns, but excludes seed plants. Lycophytes and ferns are quite different from each other, but like Bryophytes they share similarities between their life cycles. Some Pteridophytes, particularly the Lycophyte family Lycopodiaceae and most ferns, are homosporous . This means that their sporophytes produce one kind of spore, which may grow into a male, female, or hermaphroditic gametophyte. The gametophyte, sometimes also referred to as a prothallus , is a small, flat photosynthetic structure that produces archegonia and/or antheridia. When mature, flagellated sperm are released by the antheridia and require water to swim to an archegonium, where fertilization of an egg creates a new sporophyte zygote. The gametophyte supports the developing sporophyte nutritionally for a time, before it eventually dies away and the sporophyte lives independently The rest of the Pteridophytes, including the Lycophyte families Isoetaceae and Sellaginaceae, and the fern order Salviniales are heterosporous . Their sporophytes produce two kinds of spores. The smaller microspore gives rise to a male gametophyte, and the larger megaspore gives rise to a female gametophyte. Heterosporous pteridophytes also have endosporic germination: the gametophytes germinate and grow within the spore, and are not free-living. When mature, the spores are released while still containing the highly reduced gametophytes, which quickly undergo fertilization to form a new zygote (Kumar, 2001). Spermatophytes The Spermatophytes, or seed plants, are the most diverse lineage of land plants. Most of that diversity belongs to angiosperms, the flowering plants - the rest of spermatophytes are the gymnosperms. As the name implies, a key innovation in the evolution of Spermatophytes was the development of the seed (sp\u00e9rmatos in Greek = seed). The sporophytes and gametophytes of seed plants have become highly modified compared to the rest of land plants, and thus the life cycle is quite different. The spore has essentially been lost in Spermatophytes and instead the releasing a spore to create a gametophyte, the sporophyte life stage in seed plants develops specialized reproductive structures, cones in gymnosperms and flowers in angiosperms, which will give rise to the gametophyte life stages. Some Spermatophytes are monecious ( note : although this word appears very similar to monoicous, it is a different term). Monecious species produce a sporophyte with one kind of flower or cone that can produce both pollen (a new structure in this lineage, which delivers sperm) and eggs. Other Spermatophytes are dioecious, with two kinds of flowers or cones. Each sporophyte can only make one kind (in gymnosperms, either a pollen cone, which only produces sperm, or an ovulate cone, which one produces eggs; in angiosperms either a carpellate flower, which can only makes eggs or a staminate flower, which can only make sperm). Many flowering plants use a form of fertilization known as double fertilization. Flowers have a pistil (consisting of a stigma, style, and ovary) and/or stamens (consisting of an anther and filament). Each ovule contained within an ovary produces a single megasporocyte, which will undergo meiosis to produce four recombinant megaspores. Only one megaspore will survive, while the other three degenerate ( Boavida and McCormick, 2010 ). The ovule matures until it forms the megagametophyte, or embryo sac. Microsporocytes are generated within the anther, making it analogous to the microsporangium in other lineages. Each microsporocyte undergoes meiosis to form four recombinant microspores, each of which matures into a single pollen grain, a highly reduced microgametophyte. At maturity, a pollen grain consists of one vegetative cell and two sperm cells, each formed via mitosis of the original microspore. Mature pollen grains are released from the anthers and land on the stigma of a flower. The pollen grain then germinates, growing a pollen tube down the style and into the ovary, where it enters the micropyle and releases its two sperm. One sperm fertilizes the egg to produce a diploid zygote, while the other fertilizes the diploid central cell within the embryo sac to produce the triploid endosperm which will nourish the developing zygote ( Mascarenhas 1989 ); the zygote and endosperm together comprise the seed. The seed is retained on the sporophyte while the embryo develops within, and once mature, is released and will germinate into a new sporophyte. Unlike the life cycles described previously, the reduced gametophytes of seed plants do not give rise to multiple archegonial or antheridial structures. Rather, each gametophyte produces just a single egg or a single sperm (two identical sperm packaged together, actually) that will engage in sexual reproduction A note on terms Some of these terms, especially monoicy/dioicy and monecy/dioecy can be very confusing - however they are worth your time to learn because they refer to very specific differences and this makes them incredibly useful. The terms were introduced alongside the lineages that they are most useful for referring to, but it is a fun exercise to test your knowledge by asking which other lineages they encompass. For example, dioicous species have separate female and male gametophytes, which means that all Spermatophytes are dioicous . Likewise, all heterosporous pteridophytes are also dioicous. By contrast, monecy and dioecy only apply to Spermatophytes, because they refer to the specialized reproductive structures of the sporophyte generation, which only exist in gymnosperms (cones) and angiosperms (flowers). You may see the term dioecious applied to non-spermatophyte lineages. In particular, this term is often used in older literature when describing Bryophytes. The intent is to refer to a dioicous life cycle, however this is an incorrect use of the term and you should automatically translate it to 'dioicous' in your head when you encounter it used in this way. monoicous vs. dioicous = single vs. two gametophyte sexes homosporous vs. heterosporous = same vs. different spores monecious vs. dioecious = single vs. two flower types Image Downloads Images are free to download and use in presentations, for teaching purposes, or study materials. When re-using, please credit the illustrator, Elissa Sorojsrisom , and when possible linke back to this resource (https://elissasoroj.github.io/Understory/). Life Cycle Comparison Sexual Systems Simplified Life Cycles Click to download Click to download Click to download Additional Resources Raven, Peter H., Ray F. Evert, and Susan E. Eichhorn. Biology of plants. Macmillan, 2005. An excellent text on Plant Biology, but difficult to find/often expensive De Vries, Jan, and John M. Archibald. \"Plant evolution: landmarks on the path to terrestrial life.\" New Phytologist 217, no. 4 (2018): 1428-1434. Open-access article covering early-evolution of plants (transition to land). Download","title":"Plant Lifecycle Evolution"},{"location":"text/lifecycle_evo/evolution_landplants/#introduction-to-the-plant-life-cycle","text":"All sexually reproducing organisms have a life cycle that alternates between a haploid and diploid life stage. In many animals, especially vertebrates, the haploid life stage (sperm and egg) is so short-lived that we hardly consider it, as the dominant part of the life cycle is clearly the diploid. In plants, things are very different. The diploid life stage is called the sporophyte, and in some lineages of plants this is the dominant life stage. However, in some plants, such as mosses, the dominant life stage is actually the haploid life stage, which is called the gametophyte. Only the gametophyte life stage in plants make gametangia - the sexual organs where egg and sperm are produced. Many plant researchers like to joke that sporophytes are asexual - they are not capable of having sex and cannot be male or female. Only the gametophytes can be male or female, and only the gametophytes have sex! Land plants also have a special step in their life cycle that vertebrates do not: the spore. Spores are produced by the sporophyte and give rise the gametophyte, in much the same way that the zygote (i.e. the seed, in seed plants) gives rise to the sporophyte. There is a nice symmetry to the terms here: During the haploid life stage: the gam etophyte makes gam etangia, where gam etes are produced. During the diploid life stage: the spor ophyte makes spor angia, where the spor es are produced","title":"Introduction to the Plant Life Cycle"},{"location":"text/lifecycle_evo/evolution_landplants/#evolution-of-the-land-plant-lifecycle","text":"Land plants, or Embryophytes, are a monophyletic clade that includes flowering plants, conifers, ferns, lycophytes, mosses, hornworts, and liverworts. Fittingly, most of these plants live out of water, although some have returned to a completely aquatic lifestyle. It is hypothesized ( de Vries & Archibald, 2018 ) that all land plants evolved from a shared charophyte-like algal ancestor. Charophyte algae is photosynthetic and has a multiceulluar, haploid adult life stage that forms two sex organs: the male antheridium and female oogonium. When sperm from the antheridium and an egg from the oogonium fuse, they create a single-celled diploid zygote which immediately undergoes meiosis to create more haploid adults. [ancestral life cycle diagram] The name for land plants, Embryophytes, comes from a key change that occurred in the ancestor of all land plants. The diploid zygote began to delay meiosis and became multicellular - in other words, there is now a resting embryo stage in the diploid life phase. Other characteristics that distinguish Embryophytes include multicellular reproductive structures, a cuticle, and thick-walled trilete spores (Judd et al. 2016). These characteristics may have assisted the ancetral Embryophyte to transition to land. All lands plant life cycles follow this general sequence of steps: the haploid gametophyte life stage undergoes mitosis to form archegonia and antheridia, where eggs and sperm are produced an egg is fertilized by a single sperm to form a diploid zygote sporophyte once mature, the sporophyte creates specialized diploid structures called sporangia, which may be housed within further specialized structures diploid sporocytes, or spore \u2018mother cells\u2019, are created by mitosis within the sporangia each sporocyte performs two meiotic divisions to create four haploid spores spores develop into new haploid gametophytes by mitosis. The meiotic divisions in step 5 are the only opportunity for recombination to occur throughout the life cycle. All subsequent haploid structures that arise from a spore (i.e., gametophyte, archegonia, antheridia, gametes) are genetically identical to the original spore.","title":"Evolution of the Land Plant Lifecycle"},{"location":"text/lifecycle_evo/evolution_landplants/#bryophytes","text":"Bryophytes refer to a group that includes mosses, hornworts, and liverworts. The monophyly of this group has been contentious for a long time, but recently Bryophytes have been reported to be monophyletic, with hornworts sister to liverworts and mosses ( Su et al. 2021 ). Each group has a unique life history and evolutionary ancestry that distinguishes them. However, they are united by a similar life cycle, with a dominant, long-lived haploid life stage and a shorter, ephemeral diploid life stage. Some Bryophytes are monoicous, which means their gametophyte life stage is capable of producing both female and male gametangia, and therefore both egg and sperm. Others are dioicous: their gametophyte are either male or female, and each individual can only make sperm or eggs, but not both. The sperm from one gametophyte will fertilize the egg of another and produce a zygote sporophyte, which develops as a superficial structure growing from the gametophyte (in dioicous species, this only occurs on the female gametophytes). Sporangia develop within the sporophyte and release spores when mature. The spores are dispersed into the surrounding environment and develop into new gametophytes. The sporophyte then dies, but the gametophyte parent continues living, and may reproduce again","title":"Bryophytes"},{"location":"text/lifecycle_evo/evolution_landplants/#pteridophytes","text":"Pteridophytes are a paraphyletic clade that includes lycophytes and ferns, but excludes seed plants. Lycophytes and ferns are quite different from each other, but like Bryophytes they share similarities between their life cycles. Some Pteridophytes, particularly the Lycophyte family Lycopodiaceae and most ferns, are homosporous . This means that their sporophytes produce one kind of spore, which may grow into a male, female, or hermaphroditic gametophyte. The gametophyte, sometimes also referred to as a prothallus , is a small, flat photosynthetic structure that produces archegonia and/or antheridia. When mature, flagellated sperm are released by the antheridia and require water to swim to an archegonium, where fertilization of an egg creates a new sporophyte zygote. The gametophyte supports the developing sporophyte nutritionally for a time, before it eventually dies away and the sporophyte lives independently The rest of the Pteridophytes, including the Lycophyte families Isoetaceae and Sellaginaceae, and the fern order Salviniales are heterosporous . Their sporophytes produce two kinds of spores. The smaller microspore gives rise to a male gametophyte, and the larger megaspore gives rise to a female gametophyte. Heterosporous pteridophytes also have endosporic germination: the gametophytes germinate and grow within the spore, and are not free-living. When mature, the spores are released while still containing the highly reduced gametophytes, which quickly undergo fertilization to form a new zygote (Kumar, 2001).","title":"Pteridophytes"},{"location":"text/lifecycle_evo/evolution_landplants/#spermatophytes","text":"The Spermatophytes, or seed plants, are the most diverse lineage of land plants. Most of that diversity belongs to angiosperms, the flowering plants - the rest of spermatophytes are the gymnosperms. As the name implies, a key innovation in the evolution of Spermatophytes was the development of the seed (sp\u00e9rmatos in Greek = seed). The sporophytes and gametophytes of seed plants have become highly modified compared to the rest of land plants, and thus the life cycle is quite different. The spore has essentially been lost in Spermatophytes and instead the releasing a spore to create a gametophyte, the sporophyte life stage in seed plants develops specialized reproductive structures, cones in gymnosperms and flowers in angiosperms, which will give rise to the gametophyte life stages. Some Spermatophytes are monecious ( note : although this word appears very similar to monoicous, it is a different term). Monecious species produce a sporophyte with one kind of flower or cone that can produce both pollen (a new structure in this lineage, which delivers sperm) and eggs. Other Spermatophytes are dioecious, with two kinds of flowers or cones. Each sporophyte can only make one kind (in gymnosperms, either a pollen cone, which only produces sperm, or an ovulate cone, which one produces eggs; in angiosperms either a carpellate flower, which can only makes eggs or a staminate flower, which can only make sperm). Many flowering plants use a form of fertilization known as double fertilization. Flowers have a pistil (consisting of a stigma, style, and ovary) and/or stamens (consisting of an anther and filament). Each ovule contained within an ovary produces a single megasporocyte, which will undergo meiosis to produce four recombinant megaspores. Only one megaspore will survive, while the other three degenerate ( Boavida and McCormick, 2010 ). The ovule matures until it forms the megagametophyte, or embryo sac. Microsporocytes are generated within the anther, making it analogous to the microsporangium in other lineages. Each microsporocyte undergoes meiosis to form four recombinant microspores, each of which matures into a single pollen grain, a highly reduced microgametophyte. At maturity, a pollen grain consists of one vegetative cell and two sperm cells, each formed via mitosis of the original microspore. Mature pollen grains are released from the anthers and land on the stigma of a flower. The pollen grain then germinates, growing a pollen tube down the style and into the ovary, where it enters the micropyle and releases its two sperm. One sperm fertilizes the egg to produce a diploid zygote, while the other fertilizes the diploid central cell within the embryo sac to produce the triploid endosperm which will nourish the developing zygote ( Mascarenhas 1989 ); the zygote and endosperm together comprise the seed. The seed is retained on the sporophyte while the embryo develops within, and once mature, is released and will germinate into a new sporophyte. Unlike the life cycles described previously, the reduced gametophytes of seed plants do not give rise to multiple archegonial or antheridial structures. Rather, each gametophyte produces just a single egg or a single sperm (two identical sperm packaged together, actually) that will engage in sexual reproduction","title":"Spermatophytes"},{"location":"text/lifecycle_evo/evolution_landplants/#a-note-on-terms","text":"Some of these terms, especially monoicy/dioicy and monecy/dioecy can be very confusing - however they are worth your time to learn because they refer to very specific differences and this makes them incredibly useful. The terms were introduced alongside the lineages that they are most useful for referring to, but it is a fun exercise to test your knowledge by asking which other lineages they encompass. For example, dioicous species have separate female and male gametophytes, which means that all Spermatophytes are dioicous . Likewise, all heterosporous pteridophytes are also dioicous. By contrast, monecy and dioecy only apply to Spermatophytes, because they refer to the specialized reproductive structures of the sporophyte generation, which only exist in gymnosperms (cones) and angiosperms (flowers). You may see the term dioecious applied to non-spermatophyte lineages. In particular, this term is often used in older literature when describing Bryophytes. The intent is to refer to a dioicous life cycle, however this is an incorrect use of the term and you should automatically translate it to 'dioicous' in your head when you encounter it used in this way. monoicous vs. dioicous = single vs. two gametophyte sexes homosporous vs. heterosporous = same vs. different spores monecious vs. dioecious = single vs. two flower types","title":"A note on terms"},{"location":"text/lifecycle_evo/evolution_landplants/#image-downloads","text":"Images are free to download and use in presentations, for teaching purposes, or study materials. When re-using, please credit the illustrator, Elissa Sorojsrisom , and when possible linke back to this resource (https://elissasoroj.github.io/Understory/). Life Cycle Comparison Sexual Systems Simplified Life Cycles Click to download Click to download Click to download","title":"Image Downloads"},{"location":"text/lifecycle_evo/evolution_landplants/#additional-resources","text":"Raven, Peter H., Ray F. Evert, and Susan E. Eichhorn. Biology of plants. Macmillan, 2005. An excellent text on Plant Biology, but difficult to find/often expensive De Vries, Jan, and John M. Archibald. \"Plant evolution: landmarks on the path to terrestrial life.\" New Phytologist 217, no. 4 (2018): 1428-1434. Open-access article covering early-evolution of plants (transition to land). Download","title":"Additional Resources"},{"location":"text/python/","text":"Coding is becoming an integral skill in biology that is valuable for all students. Modern biological research requires most researchers to deal with staggering amounts of data (i.e. genomic, occurrence, etc). Python is just one of many coding languages that you may encounter as a student or researcher in biology. Learning any coding language will make it easier to learn another, so there is no 'perfect' language to start with. Python has a number of things to recommend it: - consistent, highly readable syntax - many built-in libraries that help you achieve common tasks - intuitive syntax and design allows you to start writing functions and programs quickly - widely used, which means there are many resources available to help you when you're stuck - widely used by the scientific community , which means that many specialty packages that perform specific analyses or __ specific to biological research are built using Python (including shadie, which will come up a lot on this site) - integrates easily with existing tools This section details how to install Python on your computer and start to download packages. 'Miniconda' is a version of Python that does not come with any pre-installed packages - this means that you will likely have to install many packages early on, but you will not have any packages taking up space on your computer that you don't need. If you followed different instructions for installing Python that told you to install 'Anaconda', this is perfectly fine- this version of Python comes with many useful pre-installed packages. If you're feeling a little overwhelmed, that's perfectly fine! It's going to feel like being thrown into the deep end for a little bit. If you're raring to get started, here is a self-guided online Python Tutorial geared towards biologists.","title":"Coding as a Biologist"},{"location":"text/python/install/","text":"Clean Installation This tutorial will install Miniconda3 onto your computer. You may follow different instructions for installing python if you choose. If you already have Python3 installed on your computer, you can skip this tutorial. For Mac: #download the latest 64-bit version wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh #install in batch mode bash Miniconda3-latest-MacOSX-x86_64.sh -b For Linux: #install the latest 64-bit version wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh # install in batch mode bash Miniconda3-latest-Linux-x86_64.sh -b For Windows: #install the latest 64-bit version curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe # install in batch mode start /wait \"\" Miniconda3-latest-Windows-x86_64.exe /InstallationType = JustMe /RegisterPython = 0 /S /D = %UserProfile% \\M iniconda3 Add conda to your path For Mac and Linux only If this is your first time installing, make sure you run this code to add conda to your path: ~/miniconda3/condabin/conda init Then restart your terminal for changes to take effect. Troubleshooting For Mac only . If your install was successul, but your computer is still unable to find conda you may have to add it to your path manually. Find the .zprofile and/or .zshrc file (your computer may have one or both) by navigating to your /home/username directory and using the command: ls -a Open the file(s) and paste the following code in a new line the end any existing content. (Remember to replace the username part with your own username) export PATH=\"/home/username/miniconda/bin:$PATH\" Save and restart your terminal for changes to take effect. Create a Working Environment It is best to create a working environment that is separate from your base environment, and install packages there. This will help you avoid dependency conflicts and manage Python versions in the future. #This code creates the environment conda create -n py38 Python = 3 .8 #This code sets the working environment conda activate py38 Note, this code creates a Python 3.8 environment, which is not the latest version of Python. Installing Packages from channels Channels are a collection of recipes, build infrastructure, and distributions for python packages. There are many different channels, but Conda-forge is the most extensive and tends to be kept up-to-date. It is a good idea to install packages from the same channel as much as possible to help reduce conflicts. You can choose to set your default channel with the following code: conda config --add channels conda-forge conda config --set channel_priority true Now, when you use the conda command to install, it will automatically install from conda-forge first: conda install shadie Installing Local Packages When you install programs by cloning repositories on GitHub, you will use a local installation with pip . To avoid installing dependencies with pip, you can use the option --no-deps - however, you will then need to make sure to install any dependencies separetly with Conda-forge. # clone the shadie repo to get git development version git clone https://github.com/elissasoroj/shadie # cd into the cloned local repo folder cd shadie/ # do local pip install (-e) with --no-deps pip install -e . --no-deps","title":"Installing Python"},{"location":"text/python/install/#clean-installation","text":"This tutorial will install Miniconda3 onto your computer. You may follow different instructions for installing python if you choose. If you already have Python3 installed on your computer, you can skip this tutorial. For Mac: #download the latest 64-bit version wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh #install in batch mode bash Miniconda3-latest-MacOSX-x86_64.sh -b For Linux: #install the latest 64-bit version wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh # install in batch mode bash Miniconda3-latest-Linux-x86_64.sh -b For Windows: #install the latest 64-bit version curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe # install in batch mode start /wait \"\" Miniconda3-latest-Windows-x86_64.exe /InstallationType = JustMe /RegisterPython = 0 /S /D = %UserProfile% \\M iniconda3","title":"Clean Installation"},{"location":"text/python/install/#add-conda-to-your-path","text":"For Mac and Linux only If this is your first time installing, make sure you run this code to add conda to your path: ~/miniconda3/condabin/conda init Then restart your terminal for changes to take effect.","title":"Add conda to your path"},{"location":"text/python/install/#troubleshooting","text":"For Mac only . If your install was successul, but your computer is still unable to find conda you may have to add it to your path manually. Find the .zprofile and/or .zshrc file (your computer may have one or both) by navigating to your /home/username directory and using the command: ls -a Open the file(s) and paste the following code in a new line the end any existing content. (Remember to replace the username part with your own username) export PATH=\"/home/username/miniconda/bin:$PATH\" Save and restart your terminal for changes to take effect.","title":"Troubleshooting"},{"location":"text/python/install/#create-a-working-environment","text":"It is best to create a working environment that is separate from your base environment, and install packages there. This will help you avoid dependency conflicts and manage Python versions in the future. #This code creates the environment conda create -n py38 Python = 3 .8 #This code sets the working environment conda activate py38 Note, this code creates a Python 3.8 environment, which is not the latest version of Python.","title":"Create a Working Environment"},{"location":"text/python/install/#installing-packages-from-channels","text":"Channels are a collection of recipes, build infrastructure, and distributions for python packages. There are many different channels, but Conda-forge is the most extensive and tends to be kept up-to-date. It is a good idea to install packages from the same channel as much as possible to help reduce conflicts. You can choose to set your default channel with the following code: conda config --add channels conda-forge conda config --set channel_priority true Now, when you use the conda command to install, it will automatically install from conda-forge first: conda install shadie","title":"Installing Packages from channels"},{"location":"text/python/install/#installing-local-packages","text":"When you install programs by cloning repositories on GitHub, you will use a local installation with pip . To avoid installing dependencies with pip, you can use the option --no-deps - however, you will then need to make sure to install any dependencies separetly with Conda-forge. # clone the shadie repo to get git development version git clone https://github.com/elissasoroj/shadie # cd into the cloned local repo folder cd shadie/ # do local pip install (-e) with --no-deps pip install -e . --no-deps","title":"Installing Local Packages"},{"location":"text/python/jupyter/","text":"Installing Jupyter Installing Jupyter is very easy. You can follow the instructions below, or visit the Installation Page on the Jupyter website. Open your Terminal, and run the following code: pip install notebook That's it! To run a jupyter notebook, simply run this code in your terminal: jupyter notebook This will open a web browser running Jupyter. You will see a filepath from the working directory where you were located when you ran the notebook command. You can also download and use JupyterLab if you prefer, which works more like a native app instead of in a tab of your web browser. What is an interactive environment? Code is just a string of characters and numbers. In order for it to produce the output that the user intends, it must be read by a computer and compiled. Originally, computers used a command-line interface (CLI), which requires strings of code in a computer language as input, which are then executed. This is one of the most challenging things to adjust to for new coders who are used to a graphical user interface, also known as a 'GUI'. Instead of pushing buttons in a visual program, like an app, the user has to know text commands that will tell the computer to do what they want. Creating files and programs using a computer language is different from how many of us first learned how to make things on a computer. Unlike writing a document in Microsfot Word, or creating a slide in Microsoft Powerpoint, the creation of a code document (written in a given computer language) and its final output are decoupled. Programs like Microsoft Office, and many others you are probably familiar with on your own computer, are often referred to as \"what you see is what you get\" (WYSIWYG) - meaning the visual representation as you work on the document directly reflects how it will look in its final form - and this is how a vast majority of users first learn how to use a computer. By contrast if you have ever tried markdown, LaTex, or even HTML/CSS you may be familiar with the concept of writing strings of code that the computer then formats for you. In order to make changes, you can't simply place your cursor on the formatted document and type - you have to go back to the source code and make the changes these, then re-compile the document. This can be incredibly tedious, especially if compilation is slow, or your are relying on multiple programs to run the code, compile it, and display the output. There are pros and cons to both approaches of asking a computer to generate output. Interactive environments help bridge the gap between them. When working with computer languages such as Python and R, we don't have the option of using a WYSIWYG program, because they don't exist! Instead, we can use an interactive environment, which combines a traditional text editor (for writing code) with other windows that can do things like compile code and display output. This allows you to edit code and see the output almost instantaneously, much like you were using a WYSIWYG program. Why do I need Jupyter? Jupyter is a web-based interactive environment for coding and creating shareable computational documents. It is compatible with many different programming languages, making it versatile. It is also web-based, making it more flexible than a native app. However, the best thing about Jupyter, by far, is the ability to save documents with both the code and output of that code and share it with others. If you learn to use Jupyter Notebooks, you will always have an environment you are comfortable coding in, and a way to save and visualize your work no matter what computer language you are working in (unless it is incredibly specific - more on that later). There are other programs that make sense to explore, especially if you are interested in writing your own programs. VScode and Sublime are two popular programs used for this purpose.","title":"Installing and Using Jupyter"},{"location":"text/python/jupyter/#installing-jupyter","text":"Installing Jupyter is very easy. You can follow the instructions below, or visit the Installation Page on the Jupyter website. Open your Terminal, and run the following code: pip install notebook That's it! To run a jupyter notebook, simply run this code in your terminal: jupyter notebook This will open a web browser running Jupyter. You will see a filepath from the working directory where you were located when you ran the notebook command. You can also download and use JupyterLab if you prefer, which works more like a native app instead of in a tab of your web browser.","title":"Installing Jupyter"},{"location":"text/python/jupyter/#what-is-an-interactive-environment","text":"Code is just a string of characters and numbers. In order for it to produce the output that the user intends, it must be read by a computer and compiled. Originally, computers used a command-line interface (CLI), which requires strings of code in a computer language as input, which are then executed. This is one of the most challenging things to adjust to for new coders who are used to a graphical user interface, also known as a 'GUI'. Instead of pushing buttons in a visual program, like an app, the user has to know text commands that will tell the computer to do what they want. Creating files and programs using a computer language is different from how many of us first learned how to make things on a computer. Unlike writing a document in Microsfot Word, or creating a slide in Microsoft Powerpoint, the creation of a code document (written in a given computer language) and its final output are decoupled. Programs like Microsoft Office, and many others you are probably familiar with on your own computer, are often referred to as \"what you see is what you get\" (WYSIWYG) - meaning the visual representation as you work on the document directly reflects how it will look in its final form - and this is how a vast majority of users first learn how to use a computer. By contrast if you have ever tried markdown, LaTex, or even HTML/CSS you may be familiar with the concept of writing strings of code that the computer then formats for you. In order to make changes, you can't simply place your cursor on the formatted document and type - you have to go back to the source code and make the changes these, then re-compile the document. This can be incredibly tedious, especially if compilation is slow, or your are relying on multiple programs to run the code, compile it, and display the output. There are pros and cons to both approaches of asking a computer to generate output. Interactive environments help bridge the gap between them. When working with computer languages such as Python and R, we don't have the option of using a WYSIWYG program, because they don't exist! Instead, we can use an interactive environment, which combines a traditional text editor (for writing code) with other windows that can do things like compile code and display output. This allows you to edit code and see the output almost instantaneously, much like you were using a WYSIWYG program.","title":"What is an interactive environment?"},{"location":"text/python/jupyter/#why-do-i-need-jupyter","text":"Jupyter is a web-based interactive environment for coding and creating shareable computational documents. It is compatible with many different programming languages, making it versatile. It is also web-based, making it more flexible than a native app. However, the best thing about Jupyter, by far, is the ability to save documents with both the code and output of that code and share it with others. If you learn to use Jupyter Notebooks, you will always have an environment you are comfortable coding in, and a way to save and visualize your work no matter what computer language you are working in (unless it is incredibly specific - more on that later). There are other programs that make sense to explore, especially if you are interested in writing your own programs. VScode and Sublime are two popular programs used for this purpose.","title":"Why do I need Jupyter?"}]}